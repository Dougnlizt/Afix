/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.dougnliz.setfilecreationtime;

import com.drew.imaging.ImageMetadataReader;
import com.drew.metadata.Directory;
import com.drew.metadata.Tag;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributeView;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author admin
 */
public class SetFileCreationFrame extends javax.swing.JFrame {

    /**
     * Creates new form SetFileCreationFrame
     */
    public SetFileCreationFrame() {
        initComponents();
        initMyComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBoxSource = new javax.swing.JComboBox<>();
        jButtonBrowseSource = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaResults = new javax.swing.JTextArea();
        jButtonResetCreationTimestamp = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jCheckBoxIncludeAllSubDirs = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Source Directory:");
        jLabel1.setToolTipText("Location of the pictures you want to sort, move, or delete");

        jComboBoxSource.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "\\Volumes\\External Hard Drive\\Brandon\\MyPictures\\", "Item 2", "Item 3", "Item 4" }));
            jComboBoxSource.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jComboBoxSourceActionPerformed(evt);
                }
            });

            jButtonBrowseSource.setText("...");
            jButtonBrowseSource.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonBrowseSourceActionPerformed(evt);
                }
            });

            jTextAreaResults.setColumns(20);
            jTextAreaResults.setRows(5);
            jScrollPane1.setViewportView(jTextAreaResults);

            jButtonResetCreationTimestamp.setText("Reset Creation Timestamp");
            jButtonResetCreationTimestamp.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonResetCreationTimestampActionPerformed(evt);
                }
            });

            jButton1.setText("Clear Output");
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });

            jCheckBoxIncludeAllSubDirs.setSelected(true);
            jCheckBoxIncludeAllSubDirs.setText("Include All Subdirectories of Selected Directory");

            jMenu1.setText("File");

            jMenuItemExit.setText("Exit");
            jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemExitActionPerformed(evt);
                }
            });
            jMenu1.add(jMenuItemExit);

            jMenuBar1.add(jMenu1);

            jMenu2.setText("Help");

            jMenuItem1.setText("About");
            jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem1ActionPerformed(evt);
                }
            });
            jMenu2.add(jMenuItem1);

            jMenuBar1.add(jMenu2);

            setJMenuBar(jMenuBar1);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jComboBoxSource, 0, 477, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonBrowseSource, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jCheckBoxIncludeAllSubDirs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButtonResetCreationTimestamp, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jComboBoxSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonBrowseSource))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonResetCreationTimestamp)
                        .addComponent(jCheckBoxIncludeAllSubDirs))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton1)
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSourceActionPerformed
        if (!initializing) {
            savePaths(selectSourceList, sourceFileName, jComboBoxSource);
        }
    }//GEN-LAST:event_jComboBoxSourceActionPerformed

    private void jButtonBrowseSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseSourceActionPerformed
        selectSource();
    }//GEN-LAST:event_jButtonBrowseSourceActionPerformed

    private void jButtonResetCreationTimestampActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetCreationTimestampActionPerformed
        changeFileCreatedDates(Paths.get((String) jComboBoxSource.getSelectedItem()), 0);
    }//GEN-LAST:event_jButtonResetCreationTimestampActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextAreaResults.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        About aboutDialog = new About(this, false);
        aboutDialog.setAppName(PROGRAM_NAME);
        aboutDialog.setDeveloper("Doug Thompson");
        aboutDialog.setVersion(PROGRAM_VERSION);
        aboutDialog.setWebsite("Application Site", "https://github.com/Dougnlizt/Afix");
        aboutDialog.setAppReadme("https://github.com/Dougnlizt/Afix/tree/master#readme");
        aboutDialog.setLocationRelativeTo(this);
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SetFileCreationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SetFileCreationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SetFileCreationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SetFileCreationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                initializing = true;
                setFileCreationFrame = new SetFileCreationFrame();
                setFileCreationFrame.setVisible(true);
                initializing = false;
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonBrowseSource;
    private javax.swing.JButton jButtonResetCreationTimestamp;
    private javax.swing.JCheckBox jCheckBoxIncludeAllSubDirs;
    private javax.swing.JComboBox<String> jComboBoxSource;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaResults;
    // End of variables declaration//GEN-END:variables

    private final static String PROGRAM_NAME = "Afix - Android File Xfer Creation Fix";
    private static String PROGRAM_VERSION = "2022.2.19";

    private static SetFileCreationFrame setFileCreationFrame;
    private final String homeDir = System.getProperty("user.home");
    private final String appName = "ImageSorter";
    private List<Path> selectSourceList = new ArrayList<>();
    private final String sourceFileName = "fileCreationSourcePaths.txt";
    private ArrayList<Path> filesList = new ArrayList<>();
    private LocalDateTime sourceDirectoryTimeStamp = null;
    private static boolean initializing = false;
    private static final String NEW_LINE = System.lineSeparator();
    private final static int MAX_SOURCE_ITEMS = 10;

    private void initMyComponents() {
        try {
            //System.out.println("Current dir: " + System.getProperty("user.dir"));
            InputStream input = this.getClass().getResourceAsStream("/target/classes/properties-from-pom.properties");
            if (input != null) {
                Properties properties = new Properties();
                properties.load(input);
                PROGRAM_VERSION = properties.getProperty("version");
            } else {
                var version = getClass().getPackage().getImplementationVersion();
                if (version != null) {
                    PROGRAM_VERSION = version;
                }
            }
        } catch(Exception ex) {
            ex.printStackTrace();
        }
        setTitle("Android File Transfer Fixer Version 1.0.0 (Jan 2022)");
        jComboBoxSource.setMaximumRowCount(MAX_SOURCE_ITEMS);
        int selectedIndex = getPaths(sourceFileName, selectSourceList, MAX_SOURCE_ITEMS);
        populateComboBox(selectSourceList, jComboBoxSource, selectedIndex);
    }

    private void selectSource() {
        selectDir(jComboBoxSource, selectSourceList);
        savePaths(selectSourceList, sourceFileName, null);
    }

    private void selectDir(JComboBox<String> comboBox, List<Path> comboList) {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String selectedDir = (String) comboBox.getSelectedItem();
        Path currPath = null;
        if (selectedDir != null) {
            currPath = Paths.get(selectedDir);
        }
        if (currPath != null) {
            chooser.setCurrentDirectory(currPath.toFile());
        }
        int returnValue = chooser.showDialog(this, "Select Dir");
        switch (returnValue) {
            case JFileChooser.CANCEL_OPTION:
                return;
            case JFileChooser.ERROR_OPTION:
                JOptionPane.showMessageDialog(this, "There was an error", "Error Selecting Directory", JOptionPane.OK_OPTION);
                return;
            case JFileChooser.APPROVE_OPTION:
                break;
        }
        File dirItem = chooser.getSelectedFile();
        Path newPath = dirItem.toPath();

        if (newPath != null) {
            //Add it to the list and refresh the combo box
            comboList.add(0, newPath);
            populateComboBox(comboList, comboBox, 0);
        }
    }

    private void savePaths(List<Path> pathList, String fileName, JComboBox<String> comboBox) {
        if (comboBox == null || comboBox.getModel() == null) {
            return;
        }
        StringBuffer stringToWrite = new StringBuffer("");
        int selectedIndex = 0;
        if (comboBox.getModel().getSize() > 0) {
            selectedIndex = comboBox.getSelectedIndex();
        }
        stringToWrite.append(String.valueOf(selectedIndex)).append("\n");
        for (Path source : pathList) {
            stringToWrite.append(source.toString()).append("\n");
        }
        Path fileDest = Paths.get(homeDir, appName, fileName);
        try {
            FileUtilities.writeStringToFile(fileDest, stringToWrite, false);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problem saving paths:  " + ex.getMessage(),
                    "Issue Saving Paths", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    public boolean isSourceDirectoryUpdated() {
        if (jComboBoxSource.getSelectedItem() == null) {
            return false;
        }
        boolean sourceUpdated = false;
        File sourceDir = Paths.get((String) jComboBoxSource.getSelectedItem()).toFile();
        if (sourceDir.isDirectory()) {
            LocalDateTime sourceDirTimeStamp = LocalDateTime.ofInstant(Instant.ofEpochMilli(sourceDir.lastModified()), ZoneId.systemDefault());
            if (sourceDirectoryTimeStamp == null) {
                sourceUpdated = true;
            } else {
                sourceUpdated = sourceDirTimeStamp.isAfter(sourceDirectoryTimeStamp);
            }
            sourceDirectoryTimeStamp = sourceDirTimeStamp;
        }
        return sourceUpdated;
    }

    private int getPaths(String fileName, List<Path> pathsList, int maxNumItems) {
        int selectedIndex = -10;
        try {
            ArrayList<String> directoriesList = FileUtilities.readLinesFromFile(Paths.get(homeDir, appName, fileName));
            pathsList.clear();
            List<String> prefsList = new ArrayList<>();
            for (int i = 0; i < Math.min(maxNumItems, directoriesList.size()); i ++) {
                String pref = directoriesList.get(i);
                if (prefsList.contains(pref)) continue;
                if (selectedIndex == -10) {
                    try {
                        selectedIndex = Integer.parseInt(pref);
                        continue;
                    } catch (Exception ex1) {
                        //First line wasn't the index
                    }
                }
                pathsList.add(Paths.get(pref));
                prefsList.add(pref);
            }
        } catch (Exception ex2) {
            ex2.printStackTrace();
        }
        return selectedIndex;
    }
    
    private void populateComboBox(List<Path> pathList, JComboBox<String> comboBox, int selectedIndex) {
        comboBox.removeAllItems();
        if (pathList.size() > (comboBox.getMaximumRowCount() + 1)) {
            pathList = pathList.subList(0, comboBox.getMaximumRowCount());
        }
        for (Path path : pathList) {
            comboBox.addItem(path.toString());
        }
        if (selectedIndex > -1 && selectedIndex < comboBox.getModel().getSize()) {
            comboBox.setSelectedIndex(selectedIndex);
        }
    }

    public void changeFileCreatedDates(Path rootPath, int rootLevel) {
        //Go through files in the dir
        if (rootPath == null) {
            return;
        }
        var gutter = "    ".repeat(rootLevel);
        //var rootPath = Paths.get((String) jComboBoxSource.getSelectedItem());
        jTextAreaResults.append(NEW_LINE);
        jTextAreaResults.append(gutter);
        jTextAreaResults.append("-- Start of '" + rootPath.getFileName() + "' --");
        jTextAreaResults.append(NEW_LINE);
        //Now get the files...
        filesList = FileUtilities.getDirContents(rootPath, null);
        for (Path path : filesList) {
            if (path.toFile().isDirectory()) {
                if (jCheckBoxIncludeAllSubDirs.isSelected()) {
                    changeFileCreatedDates(path, rootLevel + 1);
                }
                continue;
            }
            LocalDateTime fileModifiedTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(path.toFile().lastModified()), ZoneId.systemDefault());
            try {
                LocalDateTime timeStampToUse = fileModifiedTime;
                //The photo's meta data may have different file information, including the actual timestamp
                //  of when the picture was taken.  Meta values come in a list of strings that then need
                //  to be parsed.
                LocalDateTime fileCreatedTime = null;
                try {
                    var metadata = ImageMetadataReader.readMetadata(path.toFile());
                    var foundTag = false;
                    for (Directory directory : metadata.getDirectories()) {
                        for (Tag tag : directory.getTags()) {
                            System.out.println(tag);
                            //MP4s have 'Creation Time' tag with a Sun Jul 12 08:23:13 MST 2021 timestamp
                            //Images like jpg have a 'Date/Time Original' tag with a 2021:07:12 08:23:13 timestamp
                            if (tag.getTagName().equals("Creation Time")) {
                                foundTag = true;
                                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEE MMM dd HH:mm:ss zzz yyyy");
                                fileCreatedTime = LocalDateTime.parse(tag.getDescription(), formatter);
                                break;
                            } else if (tag.getTagName().equals("Date/Time Original")) {
                                foundTag = true;
                                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy:MM:dd HH:mm:ss");
                                fileCreatedTime = LocalDateTime.parse(tag.getDescription(), formatter);
                                break;
                            }
                        }
                        if (fileCreatedTime != null) {
                            break;
                        }
                    }
                    if (!foundTag) {
                        jTextAreaResults.append(gutter);
                        jTextAreaResults.append("Could not find the appropriate tag for " + path.getFileName().toString());
                        jTextAreaResults.append(NEW_LINE);
                        continue;
                    }
                } catch (DateTimeParseException ex) {
                    jTextAreaResults.append(gutter);
                    jTextAreaResults.append("Unable to parse timestamp for " + path.getFileName().toString() + ", " + ex.getMessage());
                    jTextAreaResults.append(NEW_LINE);
                    continue;
                } catch (Exception ex) {
                    //Exception might be thrown if trying to do this on a non-picture image
                    //System.out.println("Error when getting meta data: " + ex.getMessage());
                    //ex.printStackTrace();
                    jTextAreaResults.append(gutter);
                    jTextAreaResults.append("Unable to get meta data for " + path.getFileName().toString() + ", " + ex.getMessage());
                    jTextAreaResults.append(NEW_LINE);
                    continue;
                }
                if (fileCreatedTime != null) {
                    //Compare with modified time
                    if (fileCreatedTime.isBefore(fileModifiedTime)) {
                        timeStampToUse = fileCreatedTime;
                    }
                }
                if (setFileCreationDate(path, timeStampToUse)) {
                    jTextAreaResults.append(gutter);
                    jTextAreaResults.append("Set " + path.getFileName().toString() + " created time to " + timeStampToUse.toString());
                    jTextAreaResults.append(NEW_LINE);
                }
            } catch (Exception ex) {
                jTextAreaResults.append(gutter);
                jTextAreaResults.append("Can't do " + path.toString());
                jTextAreaResults.append(NEW_LINE);
            }
        }
        jTextAreaResults.append(gutter);
        jTextAreaResults.append("-- End of '" + rootPath.getFileName() + "' --");
        jTextAreaResults.append(NEW_LINE);
        jTextAreaResults.append(NEW_LINE);
    }

    public boolean setFileCreationDate(Path filePath, LocalDateTime creationDate) throws IOException {
        //TODO: For testing only
        if (true == false) {
            return true;
        }
        BasicFileAttributeView attributes = Files.getFileAttributeView(filePath, BasicFileAttributeView.class);
        FileTime time = FileTime.fromMillis(
                creationDate
                        .atZone(ZoneId.systemDefault())
                        .toInstant()
                        .toEpochMilli());
        var previousCreationTime = attributes.readAttributes().creationTime();
        if (previousCreationTime.equals(time)) {
            return false;
        }
        attributes.setTimes(time, time, time);
        return true;
    }
}
